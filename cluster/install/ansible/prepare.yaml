---
#创建秘钥
- hosts: local
  connection: local
  tasks:
  - name: check id_rsa
    local_action: stat path=/root/.ssh/id_rsa
    register: stat_result
  - name: create auth key
    command: ssh-keygen -t rsa -P "" -f /root/.ssh/id_rsa
    when: stat_result.stat.exists == false

#分发秘钥
- hosts: all
  tasks:
  - name: copy ssh key
    authorized_key:
      user: root
      key: "{{ lookup('file', '/root/.ssh/id_rsa.pub') }}"
      state: present
      exclusive: yes

#准备环境
- hosts: all
  tasks:
  - name: close firewall
    shell: "systemctl stop firewalld.service || true &&\
           systemctl disable firewalld.service || true "
  #禁用selinux
  - name: disabled selinux
    selinux: state=disabled
  #加载bridge、br_netfilter模块，添加配置文件
  - name: load modules
    shell: modprobe bridge && modprobe br_netfilter
  - name: create modules config
    file:
      path: /etc/modules-load.d/k8s.conf
      state: touch
  - name: write k8s.conf
    lineinfile:
      state: present
      dest: /etc/modules-load.d/k8s.conf
      line: "{{ item }}"
    with_items:
    - "bridge"
    - "br_netfilter"
  #设置iptables转发规则
  - name: iptables
    sysctl:
      name: "{{ item }}"
      value: 1
      sysctl_set: yes
      state: present
      reload: yes
    with_items:
    - "net.bridge.bridge-nf-call-iptables"
    - "net.bridge.bridge-nf-call-ip6tables"
  #尽量使用物理内存，不使用虚拟内存
  - name: swappiness
    sysctl:
      name: "vm.swappiness"
      value: 0
      sysctl_set: yes
      state: present
      reload: yes
  #配置源
  - name: create kubernetes.repo
    file:
      path: /etc/yum.repos.d/kubernetes.repo
      state: touch
  - name: write kubernetes.repo
    lineinfile:
      state: present
      dest: /etc/yum.repos.d/kubernetes.repo
      line: "{{ item }}"
    with_items:
    - '[kubernetes]'
    - 'name=Kubernetes'
    - 'baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/'
    - 'enabled=1'
    - 'gpgcheck=1'
    - 'repo_gpgcheck=1'
    - 'gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg'
  - shell: yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
  - shell: yum clean all
  - shell: yum -y update
  #安装必要软件
  - name: install soft
    yum: name={{ item }} state=present
    with_items:
    - nfs-utils
    - epel-release
    - net-tools
    - wget
    - vim
    - ntpdate
    - bash-completion
    - lrzsz
    - zip
    - unzip
    - bridge-utils.x86_64
    - yum-utils
    - device-mapper-persistent-data
    - lvm2
    - rsync
    - telnet
    - apr
    - apr-util
  #安装docker-ce-17.03.2
  - name: install docker-ce-17.03.2
    yum: name={{ item }} state=present
    with_items:
    - https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-selinux-17.03.2.ce-1.el7.centos.noarch.rpm
    - docker-ce-17.03.2.ce-1.el7.centos
  - name: start docker
    shell: systemctl daemon-reload;systemctl enable docker;systemctl start docker
  #安装k8s
  - name: install k8s
    yum: name={{ item }} state=present
    with_items:
    - kubelet-1.13.3
    - kubeadm-1.13.3
    - kubectl-1.13.3
  #启动kubelet
  - name: start k8s
    shell: systemctl daemon-reload;systemctl enable kubelet;systemctl start kubelet
  #拉镜像
  - name: pull k8s images
    shell: "docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/{{ item }} &&\ 
            docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/{{ item }} k8s.gcr.io/{{ item }} &&\ 
            docker rmi -f registry.cn-hangzhou.aliyuncs.com/google_containers/{{ item }}"
    with_items:
    - kube-proxy:v1.13.3
    - kube-apiserver:v1.13.3
    - kube-controller-manager:v1.13.3
    - kube-scheduler:v1.13.3
    - coredns:1.2.6
    - etcd:3.2.24
    - pause:3.1
  - name: pull flannel and kubeadm images
    shell: "docker pull registry.cn-beijing.aliyuncs.com/common-registry/flannel:v0.10.0-amd64 &&\ 
           docker tag registry.cn-beijing.aliyuncs.com/common-registry/flannel:v0.10.0-amd64 quay.io/coreos/flannel:v0.10.0-amd64 &&\ 
           docker rmi -f registry.cn-beijing.aliyuncs.com/common-registry/flannel:v0.10.0-amd64 &&\ 
           docker pull registry.cn-beijing.aliyuncs.com/common-registry/kubeadm:1.13.3"
  #创建flannel配置文件
  - shell: mkdir -p /etc/cni/net.d/ && touch /etc/cni/net.d/10-flannel.conflist
  - name: write flannel config
    lineinfile:
      state: present
      dest: /etc/cni/net.d/10-flannel.conflist
      line: "{{ item }}"
    with_items:
    - '{"name": "cbr0","plugins":'
    - '[{"type": "flannel","delegate":{"hairpinMode": true,"isDefaultGateway": true}},'
    - '{"type": "portmap","capabilities": {"portMappings": true}}]}'
#master
- hosts: local
  connection: local
  tasks:
  - name: create mater kubeconfig
    file:
      path: kubeadm-config.yaml
      state: touch
  - name: write mater kubeconfig
    lineinfile:
      dest: kubeadm-config.yaml
      line: "{{ item }}"
      state: present
    with_items:
    - 'apiVersion: kubeadm.k8s.io/v1beta1'
    - 'kind: ClusterConfiguration'
    - 'kubernetesVersion: v1.13.3'
    - 'apiServer:'
    - '  certSANs: ${CERT_SANS}'
    - 'networking:'
    - '  podSubnet: 10.244.0.0/16'
    - '  serviceSubnet: 10.96.0.0/12'
    - 'controlPlaneEndpoint: ${API_SERVER_DOMAIN}:6443'
